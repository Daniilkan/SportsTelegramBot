import aioschedule
from aiogram import Bot, filters, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.client.session.aiohttp import AiohttpSession
from config import TOKEN
import asyncio
import jsonwriter
import time

# session = AiohttpSession(proxy="http://proxy.server:3128")
bot = Bot(token=TOKEN)
dp = Dispatcher()

schedule_actions_inline = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–¢–µ–∫—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—èüóí", callback_data="check_trains")],
                                                                      [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µüìå", callback_data="add_train")],
                                                                      [types.InlineKeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Öüîä", url="https://t.me/sport_noti_bot?command=start")]])

mon = types.KeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫1Ô∏è‚É£")
tue = types.KeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫Ô∏è2Ô∏è‚É£")
wed = types.KeyboardButton(text="–°—Ä–µ–¥–∞3Ô∏è‚É£")
thu = types.KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥4Ô∏è‚É£")
fri = types.KeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞5Ô∏è‚É£")
sat = types.KeyboardButton(text="–°—É–±–±–æ—Ç–∞6Ô∏è‚É£")
sun = types.KeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ7Ô∏è‚É£")
days_keyboard = types.ReplyKeyboardMarkup(keyboard=[
    [mon, tue, wed],
    [thu, fri, sat],
    [sun]
], resize_keyboard=True)
back_main_inline = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="add_train")],[types.InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="schedule")]])
main_inline = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="schedule")]])
add_del_inline = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],[types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="del")]])

@dp.message(Command("start"))
async def start_reply(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}")
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=schedule_actions_inline)
    jsonwriter.write_user("schedules.json", message.from_user.id)
@dp.callback_query(F.data == "schedule")
async def schedule(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=schedule_actions_inline)
@dp.callback_query(F.data == "add_train")
async def add_train(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=days_keyboard)
@dp.callback_query(F.data == "check_trains")
async def see_trains(callback: types.CallbackQuery):
    await callback.message.edit_text(jsonwriter.return_trains("schedules.json", callback.from_user.id))
    await callback.message.answer("–ù–µ –∑–∞–±—ã–≤–∞–π)", reply_markup=main_inline)
@dp.callback_query(F.data == "add")
async def add(callback: types.CallbackQuery):
    userID = callback.from_user.id
    process_data = jsonwriter.read_json("process.json")
    day = process_data[str(userID)]["day"]
    time = process_data[str(userID)]["time"]
    jsonwriter.add_write_time("schedules.json", userID, day, time)
    jsonwriter.del_process("process.json", userID)
    await callback.message.edit_text("–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=main_inline)
@dp.callback_query(F.data == "del")
async def delete_training(callback: types.CallbackQuery):
    try:
        userID = callback.from_user.id
        process_data = jsonwriter.read_json("process.json")
        day = process_data[str(userID)]["day"]
        time = process_data[str(userID)]["time"]
        jsonwriter.delete_train("schedules.json", userID, time, day)
        jsonwriter.del_process("process.json", userID)
        await callback.message.edit_text("–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=main_inline)
    except:
        await callback.message.edit_text("–¢–∞–∫–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –Ω–µ—Ç", reply_markup=main_inline)
@dp.message()
async def day_write(message: types.Message):
    if(len(message.text) >= 6 and message.text[0].isalpha()):
        day = message.text[0:-3]
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=back_main_inline)
        jsonwriter.write_train("process.json", message.from_user.id, day)
    elif(len(message.text) == 5 and message.text[0].isdigit()):
        try:
            var = time.strptime(message.text, '%H:%M')
            train_time = message.text
            jsonwriter.process_time("process.json", message.from_user.id, train_time)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=add_del_inline)
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ –≤—Ä–µ–º—è")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())