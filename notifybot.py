import asyncio
import time

from aiogram import Bot, filters, Dispatcher, types, F
from aiogram.client.session.aiohttp import AiohttpSession
from config import NOTI_TOKEN

bot = Bot(token=NOTI_TOKEN)
dp = Dispatcher()

import datetime
import pytz
import jsonwriter
import parser

weekdays = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1,
    "–í—Ç–æ—Ä–Ω–∏–∫": 2,
    "–°—Ä–µ–¥–∞": 3,
    "–ß–µ—Ç–≤–µ—Ä–≥": 4,
    "–ü—è—Ç–Ω–∏—Ü–∞": 5,
    "–°—É–±–±–æ—Ç–∞": 6,
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7
}
on_markup = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüîä", callback_data="on")]])

@dp.message()
async def notifies(message: types.Message):
    if(message.text == "/start"):
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–ª—É–∂–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–æ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö @sports_help_bot", reply_markup=on_markup)

@dp.callback_query(F.data == "on")
async def turn_on(callback: types.CallbackQuery):
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
    while 1:
        today = datetime.date.today()
        day = today.isoweekday()
        currenthour = int(datetime.datetime.now(pytz.timezone('Europe/Moscow')).hour)
        currentmin = int(datetime.datetime.now(pytz.timezone('Europe/Moscow')).minute)
        currentsec = int(datetime.datetime.now(pytz.timezone('Europe/Moscow')).second)
        data = jsonwriter.read_json("schedules.json")
        for i in data[str(callback.from_user.id)]["Trains"]:
            if weekdays[i] == day:
                for j in data[str(callback.from_user.id)]["Trains"][i]:
                    if int(j[0:2]) - currenthour == 1 and currentmin - int(j[3:5]) == 0 and currentsec == 1:
                        await callback.message.answer("–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ " + j)
                        await asyncio.sleep(1)
        if currenthour == 15 and currentmin == 53 and currentsec == 1:
            await callback.message.answer("–°–æ–≤–µ—Ç –¥–Ω—è: " + parser.get_adivice())
            await callback.message.answer("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Å–µ–π—á–∞—Å.")
            await asyncio.sleep(1)
        elif currenthour == 8 and currentmin == 0 and currentsec == 1:
            await callback.message.answer("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Å —É—Ç—Ä–∞!")
            await asyncio.sleep(1)
        elif currenthour == 20 and currentmin == 0 and currentsec == 1:
            await callback.message.answer("–ï—â–µ –æ–¥–∏–Ω —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –Ω–µ –ø–æ–º–µ—à–∞–ª –±—ã.")
            await asyncio.sleep(1)
        await asyncio.sleep(0.5)

async def main():
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())